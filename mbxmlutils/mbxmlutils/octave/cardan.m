function A=cardan(varargin)

  nargs=length(varargin);
  if nargs==3
    alpha=varargin{1};
    beta=varargin{2};
    gamma=varargin{3};
  elseif nargs==1
    alpha=varargin{1}(1);
    beta=varargin{1}(2);
    gamma=varargin{1}(3);
  else
    error('Must be called with a three scalar arguments or one vector argument of length 3.');
  end

  if strcmp(typeinfo(alpha), 'swig_ref') || strcmp(typeinfo(beta), 'swig_ref') || strcmp(typeinfo(gamma), 'swig_ref')
    global swigGlobalModuleVar_fmatvec_symbolic_swig_octave;
    sym=swigGlobalModuleVar_fmatvec_symbolic_swig_octave;
    A=[sym.cos(beta)*sym.cos(gamma),...
       -sym.cos(beta)*sym.sin(gamma),...
       sym.sin(beta);
       sym.cos(alpha)*sym.sin(gamma)+sym.sin(alpha)*sym.sin(beta)*sym.cos(gamma),...
       sym.cos(alpha)*sym.cos(gamma)-sym.sin(alpha)*sym.sin(beta)*sym.sin(gamma),...
       -sym.sin(alpha)*sym.cos(beta);
       sym.sin(alpha)*sym.sin(gamma)-sym.cos(alpha)*sym.sin(beta)*sym.cos(gamma),...
       sym.cos(alpha)*sym.sin(beta)*sym.sin(gamma)+sym.sin(alpha)*sym.cos(gamma),...
       sym.cos(alpha)*sym.cos(beta)];
  else
    A=[cos(beta)*cos(gamma),...
       -cos(beta)*sin(gamma),...
       sin(beta);
       cos(alpha)*sin(gamma)+sin(alpha)*sin(beta)*cos(gamma),...
       cos(alpha)*cos(gamma)-sin(alpha)*sin(beta)*sin(gamma),...
       -sin(alpha)*cos(beta);
       sin(alpha)*sin(gamma)-cos(alpha)*sin(beta)*cos(gamma),...
       cos(alpha)*sin(beta)*sin(gamma)+sin(alpha)*cos(gamma),...
       cos(alpha)*cos(beta)];
  end
