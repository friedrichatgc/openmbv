#! /bin/sh

if [ $# -ne 5 ]; then
  echo "Usage: mbxmlutils-xsd2html <InXsdFile> <InDoxygenXmlDir> <FigureDir>"
  echo "                           <ProjectName> <DocygenPrefix>"
  echo "  InXsdFile: Input xsd file which should be converted to html"
  echo "  InDoxygenXmlDir: Directory of the Doxygen XML output of the"
  echo "                   corrospondending documentation"
  echo "  FigureDir: Colon separaded directory to search for figures (*.eps, *.png)"
  echo "  ProjectName: The name of the Project (e.g. 'OpenMBV')"
  echo "  DoxygenPrefix: Prefix of doxygen names (e.g. 'OpenMBV::')"
  exit
fi

FILE=$1 #"/home/markus/project/MBSim/openmbv/schema/openmbv.xsd"
DOXYGENDOCDIR=$2 #"/home/markus/project/MBSim/openmbv/doc_/xml"
FIGUREDIR=$3
PROJECT=$4 #"OpenMBV"
DOXYGENCLASSPREFIX=$5 #"OpenMBV::"



DOXYGENFUNCTIONPREFIX1="set"
DOXYGENFUNCTIONPREFIX2="add"
BASENAME=$(basename $FILE .xsd)
prefix=@prefix@

echo "Combine Doxygen XML documentation"
echo "  In file: $DOXYGENDOCDIR/index.xml"
echo "  XSL file: $DOXYGENDOCDIR/combine.xslt"
echo "  Out file: .$PROJECT.doxygen.xml"
@XSLTPROC@ --output .$PROJECT.doxygen.xml $DOXYGENDOCDIR/combine.xslt $DOXYGENDOCDIR/index.xml || exit
echo "DONE"

echo "Add Doxygen class and element function documentation to XML Schema"
echo "  In file: $FILE"
echo "  XSL file: @datadir@/@PACKAGE@/xsl/addDoxygenToXsd.xsl"
echo "  Out file: $BASENAME.doxygen.xsd"
@XSLTPROC@ --output $BASENAME.doxygen.xsd \
  --param DOXYGENDOC "'$(pwd)/.$PROJECT.doxygen.xml'" \
  --param DOXYGENCLASSPREFIX "'$DOXYGENCLASSPREFIX'" \
  --param DOXYGENFUNCTIONPREFIX1 "'$DOXYGENFUNCTIONPREFIX1'" \
  --param DOXYGENFUNCTIONPREFIX2 "'$DOXYGENFUNCTIONPREFIX2'" \
  @datadir@/@PACKAGE@/xsl/addDoxygenToXsd.xsl $FILE || exit
echo "DONE"




echo "Generate HTML documentation"
echo "  In file: $BASENAME.doxygen.xsd"
echo "  XSL file: @datadir@/@PACKAGE@/xsl/xsdToHtml.xsl"
echo "  Out file: $BASENAME.html"
@XSLTPROC@ --output $BASENAME.html \
  --param PROJECT "'$PROJECT'" \
  --param PHYSICALVARIABLEHTMLDOC "'@datadir@/@PACKAGE@/doc/measurement.html'" \
  @datadir@/@PACKAGE@/xsl/xsdToHtml.xsl $BASENAME.doxygen.xsd || exit
echo "DONE"

echo "Copy *.png"
for D in $(echo $FIGUREDIR | tr ':' ' '); do
  cp -f $D/*.png .
done

echo "Export equations"
echo "  In file: $BASENAME.doxygen.xsd"
echo "  XSL file: @datadir@/@PACKAGE@/xsl/xsdToEquation.xsl"
echo "  Out file: equation.txt"
@XSLTPROC@ --output equation.txt @datadir@/@PACKAGE@/xsl/xsdToEquation.xsl $BASENAME.doxygen.xsd

L=1
while [ $L -le $(cat equation.txt | wc -l) ]; do
  LINE="$(sed -rne "${L}p" equation.txt)"
  F="$(echo $LINE | cut -d' ' -f1)"
  E="$(echo $LINE | cut -d' ' -f2-)"
  echo "Generating $F for equation $E"
  cat << EOF > equation.tex
\documentclass{report}
\usepackage{graphicx,psfrag,amsmath,amssymb,color}
\setlength{\parindent}{0cm}
\setlength{\textwidth}{100cm}
\setlength{\textheight}{100cm}
\begin{document}
\pagestyle{empty}
$E
\end{document}
EOF
  latex equation.tex
  dvips -E -o equation.eps equation.dvi
  gs -q -dBATCH -dNOPAUSE -dEPSCrop -r96 -sDEVICE=pngalpha -sOutputFile=$F equation.eps
  L=$[$L+1]
done





echo "Validate generated HTML documentation"
echo "  In file: $BASENAME.html"
echo "  XSD file: @datadir@/@PACKAGE@/schema/xhtml1-transitional.xsd"
# close meta elements if this is not done by the XSLT (this is a workaround for non xhtml aware xslt)
sed -re "s|<( *meta( *[a-zA-Z_0-9-]+ *= *\"[^\"]*\")* *)>|<\1/>|g;s|< */ *meta *>||g" $BASENAME.html > $BASENAME.html.sed
rm -f $BASENAME.html
mv $BASENAME.html.sed $BASENAME.html
@XMLLINT@ --noout --schema @datadir@/@PACKAGE@/schema/xhtml1-transitional.xsd $BASENAME.html || exit

echo "Generate LaTeX documentation"
echo "  In file: $BASENAME.doxygen.xsd"
echo "  XSL file: @datadir@/@PACKAGE@/xsl/xsdToTex.xsl"
echo "  Out file: $BASENAME.tex"
@XSLTPROC@ --output $BASENAME.tex \
  --param PROJECT "'$PROJECT'" \
  --param PHYSICALVARIABLEHTMLDOC "'@datadir@/@PACKAGE@/doc/measurement.html'" \
  @datadir@/@PACKAGE@/xsl/xsdToTex.xsl $BASENAME.doxygen.xsd || exit
echo "DONE"

echo "Copy *.eps"
for D in $(echo $FIGUREDIR | tr ':' ' '); do
  cp -f $D/*.eps .
done

echo "Generate LaTeX-PS documentation"
echo "  In file: $BASENAME.tex"
echo "  Out file: $BASENAME.ps"
latex -interaction errorstopmode $BASENAME.tex || exit
latex $BASENAME.tex
latex $BASENAME.tex
dvips -o $BASENAME.ps $BASENAME.dvi || exit
