<xs:schema targetNamespace="http://www.mbsim-env.de/MBXMLUtils/CasADi"
  elementFormDefault="qualified"
  attributeFormDefault="unqualified"
  xmlns="http://www.mbsim-env.de/MBXMLUtils/CasADi"
  xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:element name="Function">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="inputs" type="ioType"/>
        <xs:element name="outputs" type="ioType"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="ioType">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" ref="SX"/>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="SX">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="row" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element ref="SXElem" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="SXElem" abstract="true" type="SXElemType"/>
  <xs:complexType name="SXElemType"/>

  <!-- a reference to a SXElem -->
  <xs:element name="SXElemRef" substitutionGroup="SXElem" type="SXElemRefType"/>
  <xs:complexType name="SXElemRefType">
    <xs:complexContent>
      <xs:extension base="SXElemType">
        <xs:attribute name="refid" type="xs:integer"/> <!-- referenc the SXElem with id refid -->
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="SXElemID" abstract="true" substitutionGroup="SXElem" type="SXElemIDType"/>
  <xs:complexType name="SXElemIDType">
    <xs:complexContent>
      <xs:extension base="SXElemType">
        <xs:attribute name="id" type="xs:integer"/> <!-- id if the SXElem, used by the reference element -->
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="SymbolicSX" substitutionGroup="SXElemID" type="SymbolicSXType"/>
  <xs:complexType name="SymbolicSXType" mixed="true"> <!-- the text content (mixed) should be xs:string -->
    <xs:complexContent>
      <xs:extension base="SXElemIDType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ZeroSX" substitutionGroup="SXElemID" type="ZeroSXType"/>
  <xs:complexType name="ZeroSXType">
    <xs:complexContent>
      <xs:extension base="SXElemIDType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="OneSX" substitutionGroup="SXElemID" type="OneSXType"/>
  <xs:complexType name="OneSXType">
    <xs:complexContent>
      <xs:extension base="SXElemIDType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="MinusOneSX" substitutionGroup="SXElemID" type="MinusOneSXType"/>
  <xs:complexType name="MinusOneSXType">
    <xs:complexContent>
      <xs:extension base="SXElemIDType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="InfSX" substitutionGroup="SXElemID" type="InfSXType"/>
  <xs:complexType name="InfSXType">
    <xs:complexContent>
      <xs:extension base="SXElemIDType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="MinusInfSX" substitutionGroup="SXElemID" type="MinusInfSXType"/>
  <xs:complexType name="MinusInfSXType">
    <xs:complexContent>
      <xs:extension base="SXElemIDType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="NanSX" substitutionGroup="SXElemID" type="NanSXType"/>
  <xs:complexType name="NanSXType">
    <xs:complexContent>
      <xs:extension base="SXElemIDType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="IntegerSX" substitutionGroup="SXElemID" type="IntegerSXType"/>
  <xs:complexType name="IntegerSXType" mixed="true"> <!-- the text content (mixed) should be xs:integer -->
    <xs:complexContent>
      <xs:extension base="SXElemIDType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="RealtypeSX" substitutionGroup="SXElemID" type="RealtypeSXType"/>
  <xs:complexType name="RealtypeSXType" mixed="true"> <!-- the text content (mixed) should be xs:decimal -->
    <xs:complexContent>
      <xs:extension base="SXElemIDType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="BinarySX" substitutionGroup="SXElemID" type="BinarySXType"/>
  <xs:complexType name="BinarySXType">
    <xs:complexContent>
      <xs:extension base="SXElemIDType">
        <xs:sequence>
          <xs:element ref="SXElem" minOccurs="2" maxOccurs="2"/> <!-- a binary op has two elements -->
        </xs:sequence>
        <xs:attribute name="op" type="xs:integer"/> <!-- the op id -->
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="UnarySX" substitutionGroup="SXElemID" type="UnarySXType"/>
  <xs:complexType name="UnarySXType">
    <xs:complexContent>
      <xs:extension base="SXElemIDType">
        <xs:sequence>
          <xs:element ref="SXElem"/> <!-- a unary op has one element -->
        </xs:sequence>
        <xs:attribute name="op" type="xs:integer"/> <!-- the op id -->
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

</xs:schema>
